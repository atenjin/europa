name: Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Any tag will cause release

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

#  release-linux:
#    name: Release on Ubuntu
#    needs: create_release # we need to know the upload URL
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set stable toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#
#      - name: Checkout source
#        uses: actions/checkout@v1
#      - name: Init
#        run: git submodule update --init --remote
#
#      - name: Build
#        run: cargo build --release
#
#      - name: Upload linux Release
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.create_release.outputs.upload_url }}
#          asset_path: ./target/release/europa
#          asset_name: europa-${{ steps.create_release.outputs.tag }}-x86_64-ubuntu
#          asset_content_type: application/octet-stream
#
#  build-mac:
#    name: Release on macOS
#    needs: create_release # we need to know the upload URL
#    runs-on: macos-latest
#
#    steps:
#      - name: Set stable toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          target: x86_64-apple-darwin
#          override: true
#
#      - name: Checkout source
#        uses: actions/checkout@v1
#      - name: Init
#        run: git submodule update --init --remote
#      - name: Build
#        run: cargo build --release
#
#      - name: Upload macOS Release
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.create_release.outputs.upload_url }}
#          asset_path: ./target/release/europa
#          asset_name: europa-${{ steps.create_release.outputs.tag }}-x86_64-apple-darwin
#          asset_content_type: application/octet-stream

  build-win:
    name: Release on win
    needs: create_release # we need to know the upload URL
    runs-on: windows-latest

    steps:
#      - name: Set stable toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true

#      - name: Checkout source
#        uses: actions/checkout@v1
#      - name: Init
#        run: git submodule update --init --remote

#      - name: Set LLVM
#        run: echo "PATH=$PATH:C:\msys64\mingw64\bin" >> $GITHUB_ENV

      - name: Set LLVM
        run: echo "::addPath::C:\msys64\mingw64\bin"

#      - name: Build
#        env:
#          LIBCLANG_PATH: "C:\\ProgramData\\scoop\\apps\\llvm\\current\\bin"
#        run: llvm-config.exe --help
#      - name: Build
#        env:
#          LIBCLANG_PATH: "C:\msys64\mingw64\bin"
#        run: dir "C:\Program Files\LLVM"
      - name: Tmp
        env:
          LIBCLANG_PATH: "C:\\msys64\\mingw64\\bin"
        run: llvm --help
#      - name: Build
#        run: cargo build --release
#
#      - name: Upload win Release
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.create_release.outputs.upload_url }}
#          asset_path: .\target\release\europa.exe
#          asset_name: europa-${{ steps.create_release.outputs.tag }}-x86_64-win
#          asset_content_type: application/octet-stream
